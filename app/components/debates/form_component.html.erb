<%= translatable_form_for(debate, html: { class: "debate-form" }) do |f| %>
  <!-- <%= render "shared/errors", resource: debate %> -->

  <fieldset class="required-fields">
    <!-- <legend class="custom-font-anakotmai"><%= t("shared.required") %></legend> -->

    <%= render "shared/globalize_locales", resource: debate %>

    <%= f.translatable_fields do |translations_form| %>
      <div>
        <%= translations_form.text_field :title,
              maxlength: Debate.title_max_length,
              data: suggest_data(debate) %>
      </div>
      <div class="js-suggest" data-locale="<%= translations_form.locale %>">
      
      </div>

      <div>
        <%= translations_form.text_area :description,
              maxlength: Debate.description_max_length,
              class: "html-area" %>
      </div>
    <% end %>
  </fieldset>

  <%= f.invisible_captcha :subtitle %>

  <fieldset>
    <!-- <legend><%= t("shared.optional") %></legend> -->

    <div>
      <!-- <%= f.text_field :tag_list, value: debate.tag_list.to_s,
              hint: t("debates.form.tags_instructions"),
              placeholder: t("debates.form.tags_placeholder"),
              data: { js_url: suggest_tags_path },
              class: "tag-autocomplete" %> -->

              <label for="select_mul"><%= t("activerecord.attributes.debate.category") %></label>
              <div id="category" class="multiSelect">
                <select id="select_mul" multiple class="multiSelect_field">
                  <option value="ผู้แทนฯ ที่คุณอยากเห็น">
                    ผู้แทนฯ ที่คุณอยากเห็น
                  </option>
                  <option value="สื่อของพรรค">
                    สื่อของพรรค
                  </option>
                  <option value="นำเสนอนโยบาย">
                    นำเสนอนโยบาย
                  </option>
                  <option value="งานสภา">
                    งานสภา
                  </option>
                  <option value="การทำงานพื้นที่">
                    การทำงานพื้นที่
                  </option>
                  <option value="การสร้างเครือข่ายและกิจกรรมสมาชิก">
                    การสร้างเครือข่ายและกิจกรรมสมาชิก
                  </option>
                  <option value="ระดมทุน">
                    ระดมทุน
                  </option>
                </select>
              </div>
              <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                <symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="iconX">
                  <g stroke-linecap="round" stroke-linejoin="round">
                      <line x1="18" y1="6" x2="6" y2="18"></line>
                      <line x1="6" y1="6" x2="18" y2="18"></line>
                  </g>
                </symbol>
              </svg>


      <div style="display: none;">
        <%= f.text_field :tag_list, value: debate.tag_list.to_s,
          placeholder: t("debates.form.tags_placeholder"),
          data: { js_url: suggest_tags_path },
          class: "tag-autocomplete" %>
      </div>
    </div>

      <%= render SDG::RelatedListSelectorComponent.new(f) %>
  </fieldset>

  <div class="actions">
    <% if debate.new_record? %>
      <div>
        <%= f.check_box :terms_of_service,
          title: t("form.accept_terms_title"),
          label: t("form.accept_terms",
                   policy: link_to(t("form.policy"), "https://www.moveforwardparty.org/privacy-policy/", target: "_blank"),
                   conditions: link_to(t("form.conditions"), "https://www.moveforwardparty.org/privacy-policy/", target: "_blank")
                  ) %>
      </div>
    <% end %>

    <%= f.submit(class: "button send-debates", value: t("debates.#{action_name}.form.submit_button")) %>
  </div>
<% end %>

<script>
  $(document).ready(function () {
    $(".multiSelect").each((e) => {
      const self = $(this);
      const field = self.find(".multiSelect_field");
      const fieldOption = field.find("option");
      const placeholder = field.attr("data-placeholder");

      field.hide().after(`<div class="multiSelect_dropdown"></div>
                                  <ul class="multiSelect_list"></ul>
                                  <span class="multiSelect_arrow"></span>`);

      fieldOption.each(function (e) {
        $(".multiSelect_list").append(
          `<li id="list-${e}" class="multiSelect_option" data-value="` +
            $(this).val().trim() +
            `">
                    <a class="multiSelect_text">` +
            $(this).text() +
            `</a>
                </li>`
        );
        // $(".multiSelect_list").append(
        //   `<li id="${($(this).text().trim()
        //   .toLowerCase()).replace(/^\s+|\s+$/gm, '')}" class="multiSelect_option" data-value="` +
        //     $(this).val().trim() +
        //     `">
        //           <a class="multiSelect_text">` +
        //     $(this).text() +
        //     `</a>
        //       </li>`
        // );
      });

      const dropdown = self.find(".multiSelect_dropdown");
      const list = self.find(".multiSelect_list");
      const option = self.find(".multiSelect_option");
      const optionText = self.find(".multiSelect_text");

      dropdown.attr("data-multiple", "true");
      list.css("top", dropdown.height() + 5);

      option.click(function (e) {
        const self = $(this);
        e.stopPropagation();
        self.addClass("-selected");
        field
          .find("option:contains(" + self.children().text() + ")")
          .prop("selected", true);

        dropdown
          .append(function (e) {
            return $(
              '<span class="multiSelect_choice"' +
                'data-value="' +
                self
                  .children()
                  .text()
                  .replace(/^\s+|\s+$/gm, "") +
                '">' +
                self.children().text() +
                '<svg class="multiSelect_deselect -iconX"><use href="#iconX"></use></svg></span>'
            ).click(function (e) {
              const self = $(this);
              e.stopPropagation();
              self.remove();
              list
                .find(".multiSelect_option:contains(" + self.text() + ")")
                .removeClass("-selected");
              list
                .css("top", dropdown.height() + 5)
                .find(".multiSelect_noselections")
                .remove();
              field
                .find("option:contains(" + self.text() + ")")
                .prop("selected", false);
              if (dropdown.children(":visible").length === 0) {
                dropdown.removeClass("-hasValue");
              }
              if ($("#category span.multiSelect_choice").length < 1) {
                $(".send-debates").attr("disabled", true);
              } else {
                $(".send-debates").attr("disabled", false);
              }
            });
          })
          .addClass("-hasValue");
        list.css("top", dropdown.height() + 5);
        if (!option.not(".-selected").length) {
          list.append('<h5 class="multiSelect_noselections">ไม่มีการเลือก</h5>');
        }
        if ($("#category span.multiSelect_choice").length < 1) {
          $(".send-debates").attr("disabled", true);
        } else {
          $(".send-debates").attr("disabled", false);
        }
      });

      dropdown.click(function (e) {
        e.stopPropagation();
        e.preventDefault();
        dropdown.toggleClass("-open");
        list
          .toggleClass("-open")
          .scrollTop(0)
          .css("top", dropdown.height() + 5);
      });

      $(document).on("click touch", function (e) {
        if (dropdown.hasClass("-open")) {
          dropdown.toggleClass("-open");
          list.removeClass("-open");
        }
      });
    });

    $(".send-debates").on("click", (e) => {
      let categories = [];
      $("#category span.multiSelect_choice").map((index, elem) => {
        categories.push($(elem).attr("data-value").trim());
      });
      $("#debate_tag_list").val(categories);
    });

    if ($("#debate_tag_list").val()) {
      $(".send-debates").attr("disabled", false);
      $(".multiSelect").each(function (e) {
        const self = $(this);
        const field = self.find(".multiSelect_field");
        const fieldOption = field.find("option");
        const placeholder = field.attr("data-placeholder");

        const dropdown = self.find(".multiSelect_dropdown");
        const list = self.find(".multiSelect_list");
        const option = self.find(".multiSelect_option");
        const optionText = self.find(".multiSelect_text");

        $("#debate_tag_list")
          .val()
          .split(",")
          .map((elem, index) => {
            dropdown.attr("data-multiple", "true");
            const li = $(".multiSelect_list li");
            for (let i = 0; i < li.length; i++) {
              if (
                $(li[i]).data("value") === elem.trim().replace(/^\s+|\s+$/gm, "")
              ) {
                // const self = $('.multiSelect_list li#'+elem.trim().replace(/^\s+|\s+$/gm, ''));
                const self = $(".multiSelect_list li#list-" + i);
                if (self.length) {
                  self.addClass("-selected");
                  field
                    .find("option:contains(" + self.children().text() + ")")
                    .prop("selected", true);
                  dropdown
                    .append(function (e) {
                      return $(
                        '<span class="multiSelect_choice"' +
                          'data-value="' +
                          self.children().text() +
                          '">' +
                          self.children().text() +
                          '<svg class="multiSelect_deselect -iconX"><use href="#iconX"></use></svg></span>'
                      ).click(function (e) {
                        const self = $(this);
                        e.stopPropagation();
                        self.remove();
                        list
                          .find(
                            ".multiSelect_option:contains(" + self.text() + ")"
                          )
                          .removeClass("-selected");
                        list
                          .css("top", dropdown.height() + 5)
                          .find(".multiSelect_noselections")
                          .remove();
                        field
                          .find("option:contains(" + self.text() + ")")
                          .prop("selected", false);
                        if (dropdown.children(":visible").length === 0) {
                          dropdown.removeClass("-hasValue");
                        }
                        if ($("#category span.multiSelect_choice").length < 1) {
                          $(".send-debates").attr("disabled", true);
                        } else {
                          $(".send-debates").attr("disabled", false);
                        }
                      });
                    })
                    .addClass("-hasValue");
                }
              }
            }
          });
      });
    } else {
      $(".send-debates").attr("disabled", true);
    }

    $(document).on('click', '.actions a', function(e){ 
      e.preventDefault(); 
      var url = $(this).attr('href'); 
      window.open(url, '_blank');
    });
  });
</script>